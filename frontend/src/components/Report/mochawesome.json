{
  "stats": {
    "suites": 3,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2024-05-17T13:50:40.469Z",
    "end": "2024-05-17T13:50:52.750Z",
    "duration": 12281,
    "testsRegistered": 4,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 1,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "7ce22646-71a5-445b-bf14-c89cd5f8e77f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should perform user creation from ADMIN with gmail ID",
          "fullTitle": "should perform user creation from ADMIN with gmail ID",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Your test logic here\nawait page.type('#email', 'nursingjobs@kggeniuslabs.com');\nawait page.type('#password', 'admin@123');\nawait page.click('button');\n// Wait for navigation to complete\nawait page.waitForNavigation();\nawait page.goto('http://192.168.253.177:3000/adduser/38');\nawait page.type('#emp_name', 'testusertwo');\nawait page.type('#phone_number', '1234567890');\nawait page.type('#password', '1234');\nawait page.select('select#head', 'admin');\nawait page.type('#employee_id', '12');\nawait page.type('#emailid', 'email9@gmail.com');\nawait page.select('select#role', \"3\");\nawait page.click('#b1'); // Click on submit button\n// Optionally wait for navigation or other indicators of success\ntry {\n  await page.waitForNavigation({ timeout: 3000 }); // Wait for navigation (3 seconds timeout)\n     console.log('Navigation completed successfully');\n  // Assert the new URL after navigation\n     const newUrl = page.url();\n  assert.strictEqual(newUrl, 'http://192.168.253.177:3000/adduser/38', 'URL after navigation is correct');\n} catch (error) {\n  if (error.name === 'TimeoutError') {\n    console.log('No navigation occurred within the timeout period');\n    // Handle the case where no navigation occurred\n  } else {\n    console.error('Navigation error:');\n    // Handle other navigation-related errors\n  }\n}",
          "err": {},
          "uuid": "e6d82c92-e8ad-4c0c-bfbe-2fba4d471f42",
          "parentUUID": "7ce22646-71a5-445b-bf14-c89cd5f8e77f",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "4ce1de23-4b46-4379-9c69-43928fbc487d",
          "title": "Registration from ADMIN Login",
          "fullFile": "C:\\Users\\Admin\\Documents\\Genius Lab\\AON\\functional_test\\test\\index.mjs",
          "file": "\\test\\index.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "perform BDM creation from ADMIN",
              "fullTitle": "Registration from ADMIN Login perform BDM creation from ADMIN",
              "timedOut": true,
              "duration": 2025,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  browser = await puppeteer.launch({\n    headless: false, // Run in non-headless mode for visibility (optional)\n    ignoreHTTPSErrors: true, // Ignore HTTPS errors\n    args: ['--no-sandbox', '--disable-setuid-sandbox'], // Additional Chromium flags\n  });\n  page = await browser.newPage();\n  // Navigate to login page\n  await page.goto('http://192.168.253.177:3000', { waitUntil: 'networkidle0' });\n  // Perform login actions\n  await page.type('#email', 'nursingjobs@kggeniuslabs.com');\n  await page.type('#password', 'admin@123');\n  await page.click('button'); \n  // Wait for navigation to complete\n  await page.waitForNavigation({ waitUntil: 'networkidle0' });\n  // Navigate to the add user page\n  await page.goto('http://192.168.253.177:3000/adduser/38', { waitUntil: 'networkidle0' });\n  // Fill in the registration form\n  await page.type('#emp_name', 'testusertwo');\n  await page.type('#phone_number', '1234567890');\n  await page.type('#password', testpassword_BDE);\n  await page.select('select#head', 'admin');\n  await page.type('#employee_id', '12');\n  await page.type('#emailid', testusername_BDE);\n  await page.select('select#role', testrole_BDE);\n  // Submit the form\n  await page.click('#b1');\n  // Wait for navigation or an indicator of success\n  try {\n    await page.waitForNavigation({ timeout: 3000 });\n    console.log('Navigation completed successfully');\n    \n    // Assert the new URL after navigation\n    const newUrl = page.url();\n    assert.strictEqual(newUrl, 'http://192.168.253.177:3000/admin/38', 'URL after navigation is correct');\n  } catch (error) {\n    if (error.name === 'TimeoutError') {\n      console.log('No navigation occurred within the timeout period');\n      // Handle the case where no navigation occurred\n    } else {\n      console.error('Navigation error:', error);\n      // Handle other navigation-related errors\n    }\n  }\n} catch (error) {\n  console.error('Test execution error:', error);\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Admin\\Documents\\Genius Lab\\AON\\functional_test\\test\\index.mjs)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\Admin\\Documents\\Genius Lab\\AON\\functional_test\\test\\index.mjs)\n    at listOnTimeout (node:internal/timers:573:17)\n    at process.processTimers (node:internal/timers:514:7)",
                "diff": null
              },
              "uuid": "d16e1fd4-b001-4f9a-ba41-e703d5a6623f",
              "parentUUID": "4ce1de23-4b46-4379-9c69-43928fbc487d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d16e1fd4-b001-4f9a-ba41-e703d5a6623f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2025,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "967fdac2-2534-4683-a21a-75d963713a95",
          "title": "Registration with gmail ID",
          "fullFile": "C:\\Users\\Admin\\Documents\\Genius Lab\\AON\\functional_test\\test\\index.mjs",
          "file": "\\test\\index.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Registration failed for gmail id",
              "fullTitle": "Registration with gmail ID Registration failed for gmail id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it('should perform user creation from ADMIN with gmail ID', async () => {\n  // Your test logic here\n  await page.type('#email', 'nursingjobs@kggeniuslabs.com');\n  await page.type('#password', 'admin@123');\n  await page.click('button');\n  // Wait for navigation to complete\n  await page.waitForNavigation();\n  await page.goto('http://192.168.253.177:3000/adduser/38');\n  await page.type('#emp_name', 'testusertwo');\n  await page.type('#phone_number', '1234567890');\n  await page.type('#password', '1234');\n  await page.select('select#head', 'admin');\n  await page.type('#employee_id', '12');\n  await page.type('#emailid', 'email9@gmail.com');\n  await page.select('select#role', \"3\");\n  await page.click('#b1'); // Click on submit button\n  // Optionally wait for navigation or other indicators of success\n  try {\n    await page.waitForNavigation({ timeout: 3000 }); // Wait for navigation (3 seconds timeout)\n       console.log('Navigation completed successfully');\n    // Assert the new URL after navigation\n       const newUrl = page.url();\n    assert.strictEqual(newUrl, 'http://192.168.253.177:3000/adduser/38', 'URL after navigation is correct');\n  } catch (error) {\n    if (error.name === 'TimeoutError') {\n      console.log('No navigation occurred within the timeout period');\n      // Handle the case where no navigation occurred\n    } else {\n      console.error('Navigation error:');\n      // Handle other navigation-related errors\n    }\n  } \n});",
              "err": {},
              "uuid": "9dd7df39-8ac3-464b-8b12-0d27bb22702b",
              "parentUUID": "967fdac2-2534-4683-a21a-75d963713a95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dd7df39-8ac3-464b-8b12-0d27bb22702b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "271cb5e7-8bb1-4d0a-88cd-8b048f95535b",
          "title": "Page Load Time",
          "fullFile": "C:\\Users\\Admin\\Documents\\Genius Lab\\AON\\functional_test\\test\\index.mjs",
          "file": "\\test\\index.mjs",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Page Load Time\"",
              "fullTitle": "Page Load Time \"before all\" hook in \"Page Load Time\"",
              "timedOut": false,
              "duration": 4699,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser = await puppeteer.launch();\npage = await browser.newPage();",
              "err": {},
              "uuid": "c1589bdc-7377-4ad8-a59b-2e96d2acd288",
              "parentUUID": "271cb5e7-8bb1-4d0a-88cd-8b048f95535b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Page Load Time\"",
              "fullTitle": "Page Load Time \"after all\" hook in \"Page Load Time\"",
              "timedOut": false,
              "duration": 2917,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.close();\n  \n// Write results to JSON file\ntry {\n  fs.writeFileSync('results.json', JSON.stringify(results, null, 2));\n} catch (err) {\n  console.error('Error writing results to file:', err);\n}",
              "err": {},
              "uuid": "5bcc00b7-c439-487f-b0ca-4ec4e3745011",
              "parentUUID": "271cb5e7-8bb1-4d0a-88cd-8b048f95535b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should load the page within acceptable time limit",
              "fullTitle": "Page Load Time should load the page within acceptable time limit",
              "timedOut": false,
              "duration": 2060,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const startTime = Date.now();\n  await page.goto('http://192.168.253.177:3000'); // Replace with your URL\n  const endTime = Date.now();\n  const loadTime = endTime - startTime;\n  \n  console.log(`Page load time: ${loadTime}ms`);\n  \n  // Assert that the load time is less than 3000ms (3 seconds)\n  assert(loadTime < 3000, `Page load time is too high: ${loadTime}ms`);\n  \n  // Capture the result\n  results.push({\n    testName: 'Page Load Time',\n    loadTime: loadTime,\n    passed: loadTime < 3000,\n    timestamp: new Date().toISOString()\n  });\n} catch (err) {\n  console.error('Test encountered an error:', err);\n  results.push({\n    testName: 'Page Load Time',\n    error: err.message,\n    passed: false,\n    timestamp: new Date().toISOString()\n  });\n  throw err; // Rethrow the error to ensure the test fails\n}",
              "err": {},
              "uuid": "de741713-77dc-40b5-8bce-2aa881852bb7",
              "parentUUID": "271cb5e7-8bb1-4d0a-88cd-8b048f95535b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de741713-77dc-40b5-8bce-2aa881852bb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2060,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "e6d82c92-e8ad-4c0c-bfbe-2fba4d471f42"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}